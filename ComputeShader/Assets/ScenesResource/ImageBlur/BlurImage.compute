// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GaussianBlurHorizontalMain
#pragma kernel GaussianBlurVerticalMain

float _BlurRadius;
float4 _TextureSize;
Texture2D _InputTexture;
RWTexture2D<float4> _OutputTexture;

static float gaussian17[] =
{
    0.00002611081194810,
    0.00021522769030413,
    0.00133919168719865,
    0.00628987509902766,
    0.02229954363469697,
    0.05967667338326389,
    0.12055019394312867,
    0.18381709484250766,
    0.21157217927735517,
    0.18381709484250766,
    0.12055019394312867,
    0.05967667338326389,
    0.02229954363469697,
    0.00628987509902766,
    0.00133919168719865,
    0.00021522769030413,
    0.00002611081194810,
};

#define MAX_RADIUS 32
groupshared float3 gs_Color[64 + 2 * MAX_RADIUS];

[numthreads(64, 1, 1)]
void GaussianBlurHorizontalMain(uint3 groupID : SV_GroupID, uint groupIndex : SV_GroupIndex, uint3 dispatchThreadID : SV_DispatchThreadID)
{
    // Load Data From Image,
    // Load 128 pixels data to SharedMemory.
    // clamp(currentPosition, 0, _TextureSize.xy - 1); Clamp Operation
    int2 currentPosition = dispatchThreadID.xy;
    int2 tempPosition = clamp(currentPosition, 0, _TextureSize.xy - 1);
    gs_Color[groupIndex + MAX_RADIUS] = _InputTexture[tempPosition].rgb;
    if (groupIndex < MAX_RADIUS)
    {
        int2 extraSample = currentPosition - int2(MAX_RADIUS, 0);
        extraSample = clamp(extraSample, 0, _TextureSize.xy - 1);
        gs_Color[groupIndex] = _InputTexture[extraSample].rgb;
    }

    if (groupIndex >= 64 - MAX_RADIUS)
    {
        int2 extraSample = currentPosition + int2(MAX_RADIUS, 0);
        extraSample = clamp(extraSample, 0, _TextureSize.xy - 1);
        gs_Color[groupIndex + 2 * MAX_RADIUS] = _InputTexture[extraSample].rgb;
    }
    
    // sync operation wo wait all data being loaded.
    GroupMemoryBarrierWithGroupSync();

    float3 color = 0;
    for (uint i = 0; i < 17; i++)
    {
        float weight = gaussian17[i];
        float sampleOffset = ((float) i - 8) * _BlurRadius * 0.125;
        int floorInt = floor(sampleOffset);
        float lerpValue = sampleOffset - floorInt;
        float3 sampleColorFloor = gs_Color[groupIndex + MAX_RADIUS + floorInt];
        float3 sampleColorCeil = gs_Color[groupIndex + MAX_RADIUS + floorInt + 1];
        float3 sampleColor = lerp(sampleColorFloor, sampleColorCeil, lerpValue);
        color += sampleColor * weight;
    }

    _OutputTexture[dispatchThreadID.xy] = float4(color, 1);
}

[numthreads(1, 64, 1)]
void GaussianBlurVerticalMain(uint3 groupID : SV_GroupID, uint groupIndex : SV_GroupIndex, uint3 dispatchThreadID : SV_DispatchThreadID)
{
    int2 currentPosition = dispatchThreadID.xy;
    int2 tempPosition = clamp(currentPosition, 0, _TextureSize.xy - 1);
    gs_Color[groupIndex + MAX_RADIUS] = _InputTexture[tempPosition].rgb;
    if (groupIndex < MAX_RADIUS)
    {
        int2 extraSample = currentPosition - int2(0, MAX_RADIUS);
        extraSample = clamp(extraSample, 0, _TextureSize.xy - 1);
        gs_Color[groupIndex] = _InputTexture[extraSample].rgb;
    }

    if (groupIndex >= 64 - MAX_RADIUS)
    {
        int2 extraSample = currentPosition + int2(0, MAX_RADIUS);
        extraSample = clamp(extraSample, 0, _TextureSize.xy - 1);
        gs_Color[groupIndex + 2 * MAX_RADIUS] = _InputTexture[extraSample].rgb;
    }
    GroupMemoryBarrierWithGroupSync();

    float3 color = 0;
    for (uint i = 0; i < 17; i++)
    {
        float weight = gaussian17[i];
        float sampleOffset = ((float) i - 8) * _BlurRadius * 0.125;
        int floorInt = floor(sampleOffset);
        float lerpValue = sampleOffset - floorInt;
        float3 sampleColorFloor = gs_Color[groupIndex + MAX_RADIUS + floorInt];
        float3 sampleColorCeil = gs_Color[groupIndex + MAX_RADIUS + floorInt + 1];
        float3 sampleColor = lerp(sampleColorFloor, sampleColorCeil, lerpValue);
        color += sampleColor * weight;
    }

    _OutputTexture[dispatchThreadID.xy] = float4(color, 1);
}